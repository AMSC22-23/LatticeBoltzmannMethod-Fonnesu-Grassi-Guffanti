macro(add_test_executable TARGET_NAME SOURCE_FILE)
    add_executable(${TARGET_NAME} ${SOURCE_FILE})
    target_link_libraries(${TARGET_NAME} PRIVATE LLALBM)
    target_include_directories(${TARGET_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/llalbm/include)
    message("${TARGET_NAME} uses include dir ${CMAKE_SOURCE_DIR}/llalbm/include")
    find_package(OpenMP REQUIRED)
    if(OpenMP_CXX_FOUND)
        target_link_libraries(${TARGET_NAME} PUBLIC OpenMP::OpenMP_CXX)
    endif()
    find_package(CUDA)
endmacro()



# Adding reading executable
add_test_executable(LatticeReading.out "unit/LatticeReadingTest.cpp")
add_test_executable(Lid.out "unit/LiddrivenTest.cpp")
add_test_executable(InletUpdate.out "unit/InletUpdates.cpp")
add_test_executable(LidExec.out "unit/LidExecTest.cpp")
add_test_executable(GenerationTest.out "unit/GenerationTest.cpp")
add_test_executable(LidFromGeneration.out "unit/LidFromGeneration.cpp")
add_test_executable(PerimeterGeneration.out "unit/PerimeterGeneration.cpp")
add_test_executable(BGKParameterTest.out "unit/BGKParameterTest.cpp")
add_test_executable(TRTLidDrivenTest.out "unit/TRTLidDrivenTest.cpp")
add_test_executable(ObstacleGenerationTest.out "unit/ObstacleGeneration.cpp")
add_test_executable(OMPTRTLidDrivenTest.out "unit/OMPTRTLidDrivenTest.cpp")
add_test_executable(LidWithObstacle.out "unit/LidWithObstacle.cpp")
add_test_executable(LidWithPSObstacle.out "unit/LidWithPSObstacle.cpp")
add_test_executable(LidWithOMPPSobstacle.out "unit/LidWithOMPPSobstacle.cpp")
add_test_executable(OpenBoundaryOutlet.out "unit/OpenBoundaryOutlet.cpp")
add_test_executable(SphereGenerationTest.out "unit/SphereGenerationTest.cpp")
add_test_executable(CUDATRTLidDrivenTest.out "unit/CUDATRTLidDrivenTest.cpp")
